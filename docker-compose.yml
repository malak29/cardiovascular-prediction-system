version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cvd_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cardiovascular_db}
      POSTGRES_USER: ${POSTGRES_USER:-cvd_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cvd_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - cvd_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cvd_user} -d ${POSTGRES_DB:-cardiovascular_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: cvd_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cvd_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/Dockerfile.backend
    container_name: cvd_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-cvd_user}:${POSTGRES_PASSWORD:-cvd_password}@postgres:5432/${POSTGRES_DB:-cardiovascular_db}
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000"]}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ml_models:/app/ml_models
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cvd_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: ../infrastructure/docker/Dockerfile.frontend
      target: development
    container_name: cvd_frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - cvd_network
    restart: unless-stopped

  # ML Model Training Service (Optional - for scheduled retraining)
  ml-trainer:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/Dockerfile.backend
    container_name: cvd_ml_trainer
    command: python -m scripts.train_models
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-cvd_user}:${POSTGRES_PASSWORD:-cvd_password}@postgres:5432/${POSTGRES_DB:-cardiovascular_db}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
      - ml_models:/app/ml_models
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cvd_network
    profiles:
      - training
    restart: "no"

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cvd_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cvd_network
    profiles:
      - monitoring

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: cvd_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - cvd_network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  ml_models:
  prometheus_data:
  grafana_data:

networks:
  cvd_network:
    driver: bridge